{
  "name": "compile",
  "node": {
    "path": "src/compile/index.js",
    "pluggableLine": 153,
    "edges": [
      "getSeedModules",
      "getModuleMaps",
      "getBundles",
      "buildOutput"
    ],
    "fnParams": [],
    "name": "compile",
    "fnStart": 153,
    "fnEnd": 161,
    "doc": "*\n * Performs an end-to-end compilation.\n *\n * @return {Promise}  compilation      Resolves to the compilation output.\n ",
    "parsedDoc": {
      "tags": [
        {
          "tag": "return",
          "type": "Promise",
          "name": "compilation",
          "optional": false,
          "description": "Resolves to the compilation output.",
          "line": 3,
          "source": "@return {Promise}  compilation      Resolves to the compilation output."
        }
      ],
      "line": 0,
      "description": "Performs an end-to-end compilation.",
      "source": "Performs an end-to-end compilation.\n\n@return {Promise}  compilation      Resolves to the compilation output."
    }
  },
  "children": [
    {
      "name": "getSeedModules",
      "node": {
        "path": "src/compile/index.js",
        "pluggableLine": 25,
        "edges": [
          "resolveModule"
        ],
        "fnParams": [],
        "name": "getSeedModules",
        "fnStart": 25,
        "fnEnd": 32,
        "doc": null,
        "parsedDoc": null
      },
      "children": [
        {
          "name": "resolveModule",
          "node": {
            "path": "src/compile/modules/resolve.js",
            "pluggableLine": 53,
            "edges": [
              "preresolve"
            ],
            "fnParams": [
              "requireStr",
              "contextPath",
              "ns",
              "nsRoot",
              "extensions"
            ],
            "name": "resolveModule",
            "fnStart": 32,
            "fnEnd": 51,
            "doc": "*\n * Given a require string and some context, resolve that require string\n * to a file on disk, returning a module seed.\n *\n * @param  {String}  requireStr  Require string or comparable value.\n * @param  {String}  contextPath Absolute path from which to resolve any relative\n *                               paths.\n * @param  {String}  ns          Namespace to set on module seed if the resolved\n *                               module is of the same namespace as its context.\n * @param  {String}  nsRoot      Absolute path of default namespace.\n * @param  {Array}   extensions  Array of file extension strings, including the leading\n *                               dot.\n *\n * @return {Object}              Module seed.\n ",
            "parsedDoc": {
              "tags": [
                {
                  "tag": "param",
                  "type": "String",
                  "name": "requireStr",
                  "optional": false,
                  "description": "Require string or comparable value.",
                  "line": 4,
                  "source": "@param  {String}  requireStr  Require string or comparable value."
                },
                {
                  "tag": "param",
                  "type": "String",
                  "name": "contextPath",
                  "optional": false,
                  "description": "Absolute path from which to resolve any relative\npaths.",
                  "line": 5,
                  "source": "@param  {String}  contextPath Absolute path from which to resolve any relative\npaths."
                },
                {
                  "tag": "param",
                  "type": "String",
                  "name": "ns",
                  "optional": false,
                  "description": "Namespace to set on module seed if the resolved\nmodule is of the same namespace as its context.",
                  "line": 7,
                  "source": "@param  {String}  ns          Namespace to set on module seed if the resolved\nmodule is of the same namespace as its context."
                },
                {
                  "tag": "param",
                  "type": "String",
                  "name": "nsRoot",
                  "optional": false,
                  "description": "Absolute path of default namespace.",
                  "line": 9,
                  "source": "@param  {String}  nsRoot      Absolute path of default namespace."
                },
                {
                  "tag": "param",
                  "type": "Array",
                  "name": "extensions",
                  "optional": false,
                  "description": "Array of file extension strings, including the leading\ndot.",
                  "line": 10,
                  "source": "@param  {Array}   extensions  Array of file extension strings, including the leading\ndot."
                },
                {
                  "tag": "return",
                  "type": "Object",
                  "name": "Module",
                  "optional": false,
                  "description": "seed.",
                  "line": 13,
                  "source": "@return {Object}              Module seed."
                }
              ],
              "line": 0,
              "description": "Given a require string and some context, resolve that require string\nto a file on disk, returning a module seed.",
              "source": "Given a require string and some context, resolve that require string\nto a file on disk, returning a module seed.\n\n@param  {String}  requireStr  Require string or comparable value.\n@param  {String}  contextPath Absolute path from which to resolve any relative\n                              paths.\n@param  {String}  ns          Namespace to set on module seed if the resolved\n                              module is of the same namespace as its context.\n@param  {String}  nsRoot      Absolute path of default namespace.\n@param  {Array}   extensions  Array of file extension strings, including the leading\n                              dot.\n\n@return {Object}              Module seed."
            }
          },
          "children": [
            {
              "name": "preresolve",
              "node": {
                "path": "src/compile/modules/resolve.js",
                "pluggableLine": 13,
                "edges": [],
                "fnParams": [
                  "requireStr"
                ],
                "name": "preresolve",
                "fnStart": 13,
                "fnEnd": 15,
                "doc": "*\n * Transform the require string before it is resolved to a file on disk.\n * No transformations occur by default - the output is the same as the input.\n *\n * @param  {String}  requireStr  Require string or comparable value.\n *\n * @return {String}              Transformed require string.\n ",
                "parsedDoc": {
                  "tags": [
                    {
                      "tag": "param",
                      "type": "String",
                      "name": "requireStr",
                      "optional": false,
                      "description": "Require string or comparable value.",
                      "line": 4,
                      "source": "@param  {String}  requireStr  Require string or comparable value."
                    },
                    {
                      "tag": "return",
                      "type": "String",
                      "name": "Transformed",
                      "optional": false,
                      "description": "require string.",
                      "line": 6,
                      "source": "@return {String}              Transformed require string."
                    }
                  ],
                  "line": 0,
                  "description": "Transform the require string before it is resolved to a file on disk.\nNo transformations occur by default - the output is the same as the input.",
                  "source": "Transform the require string before it is resolved to a file on disk.\nNo transformations occur by default - the output is the same as the input.\n\n@param  {String}  requireStr  Require string or comparable value.\n\n@return {String}              Transformed require string."
                }
              },
              "children": [],
              "markdown": "## preresolve\n  \nTransform the require string before it is resolved to a file on disk.\nNo transformations occur by default - the output is the same as the input.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **requireStr** | String | Require string or comparable value. |\n| Return value |  | String | require string. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/resolve.js#L13-L15).\n\n  ",
              "size": 1
            }
          ],
          "markdown": "## resolveModule\n  \nGiven a require string and some context, resolve that require string\nto a file on disk, returning a module seed.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **requireStr** | String | Require string or comparable value. |\n| Parameter | **contextPath** | String | Absolute path from which to resolve any relative paths. |\n| Parameter | **ns** | String | Namespace to set on module seed if the resolved module is of the same namespace as its context. |\n| Parameter | **nsRoot** | String | Absolute path of default namespace. |\n| Parameter | **extensions** | Array | Array of file extension strings, including the leading dot. |\n| Return value |  | Object | seed. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/resolve.js#L53).\n      The function that it wraps can be found [here](../src/compile/modules/resolve.js#L32-L51).\n\n  "
        }
      ],
      "markdown": "## getSeedModules\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/index.js#L25-L32).\n\n  "
    },
    {
      "name": "getModuleMaps",
      "node": {
        "path": "src/compile/index.js",
        "pluggableLine": 34,
        "edges": [
          "compileModules"
        ],
        "fnParams": [
          "seedModules"
        ],
        "name": "getModuleMaps",
        "fnStart": 34,
        "fnEnd": 44,
        "doc": null,
        "parsedDoc": null
      },
      "children": [
        {
          "name": "compileModules",
          "node": {
            "path": "src/compile/modules/compile.js",
            "pluggableLine": 28,
            "edges": [
              "resolveModule",
              "loadModule",
              "hashModule",
              "parseModule",
              "transformModule",
              "updateRequires"
            ],
            "fnParams": [
              "moduleSeeds"
            ],
            "name": "compileModules",
            "fnStart": 28,
            "fnEnd": 122,
            "doc": "*\n * Given one or more module seeds, traverse their dependency graph, collecting any and\n * all dependency modules, and then parse, transform, and hash those modules.  Return\n * a promise that resolves to the full set of modules, once they have been correctly\n * gathered and compiled.\n *\n * @param  {Array}    moduleSeeds  Module seeds, i.e. modules that have not yet been\n *                                 populated with properties such as ast, `dependencies`,\n *                                 etc.  Module objects _should_ have path, rawSource,\n *                                 and namespace values.\n *\n * @return {Promise}               Resolves to array of all compiled modules.\n ",
            "parsedDoc": {
              "tags": [
                {
                  "tag": "param",
                  "type": "Array",
                  "name": "moduleSeeds",
                  "optional": false,
                  "description": "Module seeds, i.e. modules that have not yet been\npopulated with properties such as ast, `dependencies`,\netc.  Module objects _should_ have path, rawSource,\nand namespace values.",
                  "line": 6,
                  "source": "@param  {Array}    moduleSeeds  Module seeds, i.e. modules that have not yet been\npopulated with properties such as ast, `dependencies`,\netc.  Module objects _should_ have path, rawSource,\nand namespace values."
                },
                {
                  "tag": "return",
                  "type": "Promise",
                  "name": "Resolves",
                  "optional": false,
                  "description": "to array of all compiled modules.",
                  "line": 11,
                  "source": "@return {Promise}               Resolves to array of all compiled modules."
                }
              ],
              "line": 0,
              "description": "Given one or more module seeds, traverse their dependency graph, collecting any and\nall dependency modules, and then parse, transform, and hash those modules.  Return\na promise that resolves to the full set of modules, once they have been correctly\ngathered and compiled.",
              "source": "Given one or more module seeds, traverse their dependency graph, collecting any and\nall dependency modules, and then parse, transform, and hash those modules.  Return\na promise that resolves to the full set of modules, once they have been correctly\ngathered and compiled.\n\n@param  {Array}    moduleSeeds  Module seeds, i.e. modules that have not yet been\n                                populated with properties such as ast, `dependencies`,\n                                etc.  Module objects _should_ have path, rawSource,\n                                and namespace values.\n\n@return {Promise}               Resolves to array of all compiled modules."
            }
          },
          "children": [
            {
              "name": "resolveModule",
              "node": {
                "path": "src/compile/modules/resolve.js",
                "pluggableLine": 53,
                "edges": [
                  "preresolve"
                ],
                "fnParams": [
                  "requireStr",
                  "contextPath",
                  "ns",
                  "nsRoot",
                  "extensions"
                ],
                "name": "resolveModule",
                "fnStart": 32,
                "fnEnd": 51,
                "doc": "*\n * Given a require string and some context, resolve that require string\n * to a file on disk, returning a module seed.\n *\n * @param  {String}  requireStr  Require string or comparable value.\n * @param  {String}  contextPath Absolute path from which to resolve any relative\n *                               paths.\n * @param  {String}  ns          Namespace to set on module seed if the resolved\n *                               module is of the same namespace as its context.\n * @param  {String}  nsRoot      Absolute path of default namespace.\n * @param  {Array}   extensions  Array of file extension strings, including the leading\n *                               dot.\n *\n * @return {Object}              Module seed.\n ",
                "parsedDoc": {
                  "tags": [
                    {
                      "tag": "param",
                      "type": "String",
                      "name": "requireStr",
                      "optional": false,
                      "description": "Require string or comparable value.",
                      "line": 4,
                      "source": "@param  {String}  requireStr  Require string or comparable value."
                    },
                    {
                      "tag": "param",
                      "type": "String",
                      "name": "contextPath",
                      "optional": false,
                      "description": "Absolute path from which to resolve any relative\npaths.",
                      "line": 5,
                      "source": "@param  {String}  contextPath Absolute path from which to resolve any relative\npaths."
                    },
                    {
                      "tag": "param",
                      "type": "String",
                      "name": "ns",
                      "optional": false,
                      "description": "Namespace to set on module seed if the resolved\nmodule is of the same namespace as its context.",
                      "line": 7,
                      "source": "@param  {String}  ns          Namespace to set on module seed if the resolved\nmodule is of the same namespace as its context."
                    },
                    {
                      "tag": "param",
                      "type": "String",
                      "name": "nsRoot",
                      "optional": false,
                      "description": "Absolute path of default namespace.",
                      "line": 9,
                      "source": "@param  {String}  nsRoot      Absolute path of default namespace."
                    },
                    {
                      "tag": "param",
                      "type": "Array",
                      "name": "extensions",
                      "optional": false,
                      "description": "Array of file extension strings, including the leading\ndot.",
                      "line": 10,
                      "source": "@param  {Array}   extensions  Array of file extension strings, including the leading\ndot."
                    },
                    {
                      "tag": "return",
                      "type": "Object",
                      "name": "Module",
                      "optional": false,
                      "description": "seed.",
                      "line": 13,
                      "source": "@return {Object}              Module seed."
                    }
                  ],
                  "line": 0,
                  "description": "Given a require string and some context, resolve that require string\nto a file on disk, returning a module seed.",
                  "source": "Given a require string and some context, resolve that require string\nto a file on disk, returning a module seed.\n\n@param  {String}  requireStr  Require string or comparable value.\n@param  {String}  contextPath Absolute path from which to resolve any relative\n                              paths.\n@param  {String}  ns          Namespace to set on module seed if the resolved\n                              module is of the same namespace as its context.\n@param  {String}  nsRoot      Absolute path of default namespace.\n@param  {Array}   extensions  Array of file extension strings, including the leading\n                              dot.\n\n@return {Object}              Module seed."
                }
              },
              "children": [
                {
                  "name": "preresolve",
                  "node": {
                    "path": "src/compile/modules/resolve.js",
                    "pluggableLine": 13,
                    "edges": [],
                    "fnParams": [
                      "requireStr"
                    ],
                    "name": "preresolve",
                    "fnStart": 13,
                    "fnEnd": 15,
                    "doc": "*\n * Transform the require string before it is resolved to a file on disk.\n * No transformations occur by default - the output is the same as the input.\n *\n * @param  {String}  requireStr  Require string or comparable value.\n *\n * @return {String}              Transformed require string.\n ",
                    "parsedDoc": {
                      "tags": [
                        {
                          "tag": "param",
                          "type": "String",
                          "name": "requireStr",
                          "optional": false,
                          "description": "Require string or comparable value.",
                          "line": 4,
                          "source": "@param  {String}  requireStr  Require string or comparable value."
                        },
                        {
                          "tag": "return",
                          "type": "String",
                          "name": "Transformed",
                          "optional": false,
                          "description": "require string.",
                          "line": 6,
                          "source": "@return {String}              Transformed require string."
                        }
                      ],
                      "line": 0,
                      "description": "Transform the require string before it is resolved to a file on disk.\nNo transformations occur by default - the output is the same as the input.",
                      "source": "Transform the require string before it is resolved to a file on disk.\nNo transformations occur by default - the output is the same as the input.\n\n@param  {String}  requireStr  Require string or comparable value.\n\n@return {String}              Transformed require string."
                    }
                  },
                  "children": [],
                  "markdown": "## preresolve\n  \nTransform the require string before it is resolved to a file on disk.\nNo transformations occur by default - the output is the same as the input.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **requireStr** | String | Require string or comparable value. |\n| Return value |  | String | require string. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/resolve.js#L13-L15).\n\n  ",
                  "size": 1
                }
              ],
              "markdown": "## resolveModule\n  \nGiven a require string and some context, resolve that require string\nto a file on disk, returning a module seed.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **requireStr** | String | Require string or comparable value. |\n| Parameter | **contextPath** | String | Absolute path from which to resolve any relative paths. |\n| Parameter | **ns** | String | Namespace to set on module seed if the resolved module is of the same namespace as its context. |\n| Parameter | **nsRoot** | String | Absolute path of default namespace. |\n| Parameter | **extensions** | Array | Array of file extension strings, including the leading dot. |\n| Return value |  | Object | seed. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/resolve.js#L53).\n      The function that it wraps can be found [here](../src/compile/modules/resolve.js#L32-L51).\n\n  "
            },
            {
              "name": "loadModule",
              "node": {
                "path": "src/compile/modules/load.js",
                "pluggableLine": 55,
                "edges": [
                  "readSource",
                  "setModuleType"
                ],
                "fnParams": [
                  "module"
                ],
                "name": "loadModule",
                "fnStart": 55,
                "fnEnd": 58,
                "doc": "*\n * Given a module seed, read the module from disk and determine its type.\n *\n * @param  {Object}  module   Module seed.\n *\n * @return {Object}           Module seed plus `rawSource` and `type` properties.\n ",
                "parsedDoc": {
                  "tags": [
                    {
                      "tag": "param",
                      "type": "Object",
                      "name": "module",
                      "optional": false,
                      "description": "Module seed.",
                      "line": 3,
                      "source": "@param  {Object}  module   Module seed."
                    },
                    {
                      "tag": "return",
                      "type": "Object",
                      "name": "Module",
                      "optional": false,
                      "description": "seed plus `rawSource` and `type` properties.",
                      "line": 5,
                      "source": "@return {Object}           Module seed plus `rawSource` and `type` properties."
                    }
                  ],
                  "line": 0,
                  "description": "Given a module seed, read the module from disk and determine its type.",
                  "source": "Given a module seed, read the module from disk and determine its type.\n\n@param  {Object}  module   Module seed.\n\n@return {Object}           Module seed plus `rawSource` and `type` properties."
                }
              },
              "children": [
                {
                  "name": "readSource",
                  "node": {
                    "path": "src/compile/modules/load.js",
                    "pluggableLine": 30,
                    "edges": [],
                    "fnParams": [
                      "module"
                    ],
                    "name": "readSource",
                    "fnStart": 30,
                    "fnEnd": 33,
                    "doc": "*\n * This function is invoked whenever the compiler attempts to read a source-file\n * from the disk.  It takes an raw-module object as its only input.  The properties\n * available on that object are as follows:\n *\n *  - `path` - the absolute path of the file\n *  - `ns` - the namespace of the module (either the default ns, or borrowed from its\n *    containing package)\n *  - `nsRoot` - the absolute path to the root of the namespace\n *  - `nsPath` - the file's path relative to the root of the namespace\n *\n * The function should output an object with the same properties, plus one additional\n * property: `rawSource`.  This property should be the string-value of the module\n * source.\n *\n * @param  {Object} module  Module object.\n *\n * @return {Object}         Module object + `rawSource`.\n ",
                    "parsedDoc": {
                      "tags": [
                        {
                          "tag": "param",
                          "type": "Object",
                          "name": "module",
                          "optional": false,
                          "description": "Module object.",
                          "line": 15,
                          "source": "@param  {Object} module  Module object."
                        },
                        {
                          "tag": "return",
                          "type": "Object",
                          "name": "Module",
                          "optional": false,
                          "description": "object + `rawSource`.",
                          "line": 17,
                          "source": "@return {Object}         Module object + `rawSource`."
                        }
                      ],
                      "line": 0,
                      "description": "This function is invoked whenever the compiler attempts to read a source-file\nfrom the disk.  It takes an raw-module object as its only input.  The properties\navailable on that object are as follows:\n\n- `path` - the absolute path of the file\n- `ns` - the namespace of the module (either the default ns, or borrowed from its\ncontaining package)\n- `nsRoot` - the absolute path to the root of the namespace\n- `nsPath` - the file's path relative to the root of the namespace\n\nThe function should output an object with the same properties, plus one additional\nproperty: `rawSource`.  This property should be the string-value of the module\nsource.",
                      "source": "This function is invoked whenever the compiler attempts to read a source-file\nfrom the disk.  It takes an raw-module object as its only input.  The properties\navailable on that object are as follows:\n\n - `path` - the absolute path of the file\n - `ns` - the namespace of the module (either the default ns, or borrowed from its\n   containing package)\n - `nsRoot` - the absolute path to the root of the namespace\n - `nsPath` - the file's path relative to the root of the namespace\n\nThe function should output an object with the same properties, plus one additional\nproperty: `rawSource`.  This property should be the string-value of the module\nsource.\n\n@param  {Object} module  Module object.\n\n@return {Object}         Module object + `rawSource`."
                    }
                  },
                  "children": [],
                  "markdown": "## readSource\n  \nThis function is invoked whenever the compiler attempts to read a source-file\nfrom the disk.  It takes an raw-module object as its only input.  The properties\navailable on that object are as follows:\n\n- `path` - the absolute path of the file\n- `ns` - the namespace of the module (either the default ns, or borrowed from its\ncontaining package)\n- `nsRoot` - the absolute path to the root of the namespace\n- `nsPath` - the file's path relative to the root of the namespace\n\nThe function should output an object with the same properties, plus one additional\nproperty: `rawSource`.  This property should be the string-value of the module\nsource.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **module** | Object | Module object. |\n| Return value |  | Object | object + `rawSource`. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/load.js#L30-L33).\n\n  ",
                  "size": 1
                },
                {
                  "name": "setModuleType",
                  "node": {
                    "path": "src/compile/modules/load.js",
                    "pluggableLine": 44,
                    "edges": [],
                    "fnParams": [
                      "module"
                    ],
                    "name": "setModuleType",
                    "fnStart": 44,
                    "fnEnd": 46,
                    "doc": "*\n * Given the early-stage module (module seed + rawSource property), determine and set\n * its type.  This value defaults to \"javascript\" and is used to determine whether\n * default behaviors for parsing and processing modules should be used on the module.\n *\n * @param  {Object} module  Early-stage module.\n *\n * @return {Object}         Module with new `type` property.\n ",
                    "parsedDoc": {
                      "tags": [
                        {
                          "tag": "param",
                          "type": "Object",
                          "name": "module",
                          "optional": false,
                          "description": "Early-stage module.",
                          "line": 5,
                          "source": "@param  {Object} module  Early-stage module."
                        },
                        {
                          "tag": "return",
                          "type": "Object",
                          "name": "Module",
                          "optional": false,
                          "description": "with new `type` property.",
                          "line": 7,
                          "source": "@return {Object}         Module with new `type` property."
                        }
                      ],
                      "line": 0,
                      "description": "Given the early-stage module (module seed + rawSource property), determine and set\nits type.  This value defaults to \"javascript\" and is used to determine whether\ndefault behaviors for parsing and processing modules should be used on the module.",
                      "source": "Given the early-stage module (module seed + rawSource property), determine and set\nits type.  This value defaults to \"javascript\" and is used to determine whether\ndefault behaviors for parsing and processing modules should be used on the module.\n\n@param  {Object} module  Early-stage module.\n\n@return {Object}         Module with new `type` property."
                    }
                  },
                  "children": [],
                  "markdown": "## setModuleType\n  \nGiven the early-stage module (module seed + rawSource property), determine and set\nits type.  This value defaults to \"javascript\" and is used to determine whether\ndefault behaviors for parsing and processing modules should be used on the module.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **module** | Object | Early-stage module. |\n| Return value |  | Object | with new `type` property. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/load.js#L44-L46).\n\n  ",
                  "size": 1
                }
              ],
              "markdown": "## loadModule\n  \nGiven a module seed, read the module from disk and determine its type.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **module** | Object | Module seed. |\n| Return value |  | Object | seed plus `rawSource` and `type` properties. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/load.js#L55-L58).\n\n  "
            },
            {
              "name": "hashModule",
              "node": {
                "path": "src/compile/modules/hash.js",
                "pluggableLine": 42,
                "edges": [
                  "updateModuleHash"
                ],
                "fnParams": [
                  "module"
                ],
                "name": "hashModule",
                "fnStart": 42,
                "fnEnd": 51,
                "doc": "*\n * Given a mostly-compiled module, generate a hash for that module and resolve\n * to that module with a new `hash` property.\n *\n * @param  {Object}  module  Module that needs to be hashed hash.\n *\n * @return {Object}          Module that now has a hash property.\n ",
                "parsedDoc": {
                  "tags": [
                    {
                      "tag": "param",
                      "type": "Object",
                      "name": "module",
                      "optional": false,
                      "description": "Module that needs to be hashed hash.",
                      "line": 4,
                      "source": "@param  {Object}  module  Module that needs to be hashed hash."
                    },
                    {
                      "tag": "return",
                      "type": "Object",
                      "name": "Module",
                      "optional": false,
                      "description": "that now has a hash property.",
                      "line": 6,
                      "source": "@return {Object}          Module that now has a hash property."
                    }
                  ],
                  "line": 0,
                  "description": "Given a mostly-compiled module, generate a hash for that module and resolve\nto that module with a new `hash` property.",
                  "source": "Given a mostly-compiled module, generate a hash for that module and resolve\nto that module with a new `hash` property.\n\n@param  {Object}  module  Module that needs to be hashed hash.\n\n@return {Object}          Module that now has a hash property."
                }
              },
              "children": [
                {
                  "name": "updateModuleHash",
                  "node": {
                    "path": "src/compile/modules/hash.js",
                    "pluggableLine": 21,
                    "edges": [],
                    "fnParams": [
                      "args"
                    ],
                    "name": "updateModuleHash",
                    "fnStart": 21,
                    "fnEnd": 32,
                    "doc": "*\n * Use data from the provided module to generate a hash, utilizing the provided\n * update function.  Only string values should be passed to the update function.\n * The resulting hash should be deterministic for the same inputs in the same order.\n *\n * @param  {Object}    args         Wrapper object for update and module.\n * @param  {Object}    args.module  Module that needs a hash property.\n * @param  {Function}  args.update  Function to be invoked with data that uniquely\n *                                  identifies the module (or, more precisely, the\n *                                  run-time behavior of the module).\n *\n * @return {Object}                 The same as the input `args`.  This is so that\n *                                  chained transformers of this function have easy\n *                                  access to both the module and the update\n *                                  function.\n ",
                    "parsedDoc": {
                      "tags": [
                        {
                          "tag": "param",
                          "type": "Object",
                          "name": "args",
                          "optional": false,
                          "description": "Wrapper object for update and module.",
                          "line": 5,
                          "source": "@param  {Object}    args         Wrapper object for update and module."
                        },
                        {
                          "tag": "param",
                          "type": "Object",
                          "name": "args.module",
                          "optional": false,
                          "description": "Module that needs a hash property.",
                          "line": 6,
                          "source": "@param  {Object}    args.module  Module that needs a hash property."
                        },
                        {
                          "tag": "param",
                          "type": "Function",
                          "name": "args.update",
                          "optional": false,
                          "description": "Function to be invoked with data that uniquely\nidentifies the module (or, more precisely, the\nrun-time behavior of the module).",
                          "line": 7,
                          "source": "@param  {Function}  args.update  Function to be invoked with data that uniquely\nidentifies the module (or, more precisely, the\nrun-time behavior of the module)."
                        },
                        {
                          "tag": "return",
                          "type": "Object",
                          "name": "The",
                          "optional": false,
                          "description": "same as the input `args`.  This is so that\nchained transformers of this function have easy\naccess to both the module and the update\nfunction.",
                          "line": 11,
                          "source": "@return {Object}                 The same as the input `args`.  This is so that\nchained transformers of this function have easy\naccess to both the module and the update\nfunction."
                        }
                      ],
                      "line": 0,
                      "description": "Use data from the provided module to generate a hash, utilizing the provided\nupdate function.  Only string values should be passed to the update function.\nThe resulting hash should be deterministic for the same inputs in the same order.",
                      "source": "Use data from the provided module to generate a hash, utilizing the provided\nupdate function.  Only string values should be passed to the update function.\nThe resulting hash should be deterministic for the same inputs in the same order.\n\n@param  {Object}    args         Wrapper object for update and module.\n@param  {Object}    args.module  Module that needs a hash property.\n@param  {Function}  args.update  Function to be invoked with data that uniquely\n                                 identifies the module (or, more precisely, the\n                                 run-time behavior of the module).\n\n@return {Object}                 The same as the input `args`.  This is so that\n                                 chained transformers of this function have easy\n                                 access to both the module and the update\n                                 function."
                    }
                  },
                  "children": [],
                  "markdown": "## updateModuleHash\n  \nUse data from the provided module to generate a hash, utilizing the provided\nupdate function.  Only string values should be passed to the update function.\nThe resulting hash should be deterministic for the same inputs in the same order.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **args** | Object | Wrapper object for update and module. |\n| Parameter | **args.module** | Object | Module that needs a hash property. |\n| Parameter | **args.update** | Function | Function to be invoked with data that uniquely identifies the module (or, more precisely, the run-time behavior of the module). |\n| Return value |  | Object | same as the input `args`. This is so that chained transformers of this function have easy access to both the module and the update function. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/hash.js#L21-L32).\n\n  ",
                  "size": 1
                }
              ],
              "markdown": "## hashModule\n  \nGiven a mostly-compiled module, generate a hash for that module and resolve\nto that module with a new `hash` property.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **module** | Object | Module that needs to be hashed hash. |\n| Return value |  | Object | that now has a hash property. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/hash.js#L42-L51).\n\n  "
            },
            {
              "name": "parseModule",
              "node": {
                "path": "src/compile/modules/parse.js",
                "pluggableLine": 18,
                "edges": [],
                "fnParams": [
                  "module"
                ],
                "name": "parseModule",
                "fnStart": 18,
                "fnEnd": 39,
                "doc": "*\n * Parse the source of the provided early-stage module.  Resolves to the same\n * module with a new `ast` property (or equivalent for non-JavaScript modules).\n *\n * @param  {Object}  module  Unparsed module with rawSource property.\n *\n * @return {Object}          Parsed module with new `ast` property.\n ",
                "parsedDoc": {
                  "tags": [
                    {
                      "tag": "param",
                      "type": "Object",
                      "name": "module",
                      "optional": false,
                      "description": "Unparsed module with rawSource property.",
                      "line": 4,
                      "source": "@param  {Object}  module  Unparsed module with rawSource property."
                    },
                    {
                      "tag": "return",
                      "type": "Object",
                      "name": "Parsed",
                      "optional": false,
                      "description": "module with new `ast` property.",
                      "line": 6,
                      "source": "@return {Object}          Parsed module with new `ast` property."
                    }
                  ],
                  "line": 0,
                  "description": "Parse the source of the provided early-stage module.  Resolves to the same\nmodule with a new `ast` property (or equivalent for non-JavaScript modules).",
                  "source": "Parse the source of the provided early-stage module.  Resolves to the same\nmodule with a new `ast` property (or equivalent for non-JavaScript modules).\n\n@param  {Object}  module  Unparsed module with rawSource property.\n\n@return {Object}          Parsed module with new `ast` property."
                }
              },
              "children": [],
              "markdown": "## parseModule\n  \nParse the source of the provided early-stage module.  Resolves to the same\nmodule with a new `ast` property (or equivalent for non-JavaScript modules).\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **module** | Object | Unparsed module with rawSource property. |\n| Return value |  | Object | module with new `ast` property. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/parse.js#L18-L39).\n\n  ",
              "size": 1
            },
            {
              "name": "transformModule",
              "node": {
                "path": "src/compile/modules/transform.js",
                "pluggableLine": 18,
                "edges": [],
                "fnParams": [
                  "module"
                ],
                "name": "transformModule",
                "fnStart": 18,
                "fnEnd": 57,
                "doc": "*\n * Transforms the module's AST, returning a module object with transformed\n * `ast` property as well as a new `synchronousRequires` property.  If the\n * module is not of type \"javascript\", transformations to type-specific\n * intermediate representation should occur at this step.\n *\n * @param  {Object} module  Module object, with `ast` property.\n *\n * @return {Object}         Module object with transformed `ast` property\n *                          and new `synchronousRequires` property.\n ",
                "parsedDoc": {
                  "tags": [
                    {
                      "tag": "param",
                      "type": "Object",
                      "name": "module",
                      "optional": false,
                      "description": "Module object, with `ast` property.",
                      "line": 6,
                      "source": "@param  {Object} module  Module object, with `ast` property."
                    },
                    {
                      "tag": "return",
                      "type": "Object",
                      "name": "Module",
                      "optional": false,
                      "description": "object with transformed `ast` property\nand new `synchronousRequires` property.",
                      "line": 8,
                      "source": "@return {Object}         Module object with transformed `ast` property\nand new `synchronousRequires` property."
                    }
                  ],
                  "line": 0,
                  "description": "Transforms the module's AST, returning a module object with transformed\n`ast` property as well as a new `synchronousRequires` property.  If the\nmodule is not of type \"javascript\", transformations to type-specific\nintermediate representation should occur at this step.",
                  "source": "Transforms the module's AST, returning a module object with transformed\n`ast` property as well as a new `synchronousRequires` property.  If the\nmodule is not of type \"javascript\", transformations to type-specific\nintermediate representation should occur at this step.\n\n@param  {Object} module  Module object, with `ast` property.\n\n@return {Object}         Module object with transformed `ast` property\n                         and new `synchronousRequires` property."
                }
              },
              "children": [],
              "markdown": "## transformModule\n  \nTransforms the module's AST, returning a module object with transformed\n`ast` property as well as a new `synchronousRequires` property.  If the\nmodule is not of type \"javascript\", transformations to type-specific\nintermediate representation should occur at this step.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **module** | Object | Module object, with `ast` property. |\n| Return value |  | Object | object with transformed `ast` property and new `synchronousRequires` property. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/transform.js#L18-L57).\n\n  ",
              "size": 1
            },
            {
              "name": "updateRequires",
              "node": {
                "path": "src/compile/modules/update-requires.js",
                "pluggableLine": 16,
                "edges": [],
                "fnParams": [
                  "module"
                ],
                "name": "updateRequires",
                "fnStart": 16,
                "fnEnd": 37,
                "doc": "*\n * Give a module whose dependencies have been identified and compiled, replace\n * all original `require(\"path/to/dep\")` with `require(\"HASH_OF_DEP\")`.\n *\n * @param  {Object}  module  Module with AST containing original require expressions.\n *\n * @return {Object}          Module with AST containing require expressions whose\n *                           arguments have been replaced with corresponding dependency\n *                           module hashes.\n ",
                "parsedDoc": {
                  "tags": [
                    {
                      "tag": "param",
                      "type": "Object",
                      "name": "module",
                      "optional": false,
                      "description": "Module with AST containing original require expressions.",
                      "line": 4,
                      "source": "@param  {Object}  module  Module with AST containing original require expressions."
                    },
                    {
                      "tag": "return",
                      "type": "Object",
                      "name": "Module",
                      "optional": false,
                      "description": "with AST containing require expressions whose\narguments have been replaced with corresponding dependency\nmodule hashes.",
                      "line": 6,
                      "source": "@return {Object}          Module with AST containing require expressions whose\narguments have been replaced with corresponding dependency\nmodule hashes."
                    }
                  ],
                  "line": 0,
                  "description": "Give a module whose dependencies have been identified and compiled, replace\nall original `require(\"path/to/dep\")` with `require(\"HASH_OF_DEP\")`.",
                  "source": "Give a module whose dependencies have been identified and compiled, replace\nall original `require(\"path/to/dep\")` with `require(\"HASH_OF_DEP\")`.\n\n@param  {Object}  module  Module with AST containing original require expressions.\n\n@return {Object}          Module with AST containing require expressions whose\n                          arguments have been replaced with corresponding dependency\n                          module hashes."
                }
              },
              "children": [],
              "markdown": "## updateRequires\n  \nGive a module whose dependencies have been identified and compiled, replace\nall original `require(\"path/to/dep\")` with `require(\"HASH_OF_DEP\")`.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **module** | Object | Module with AST containing original require expressions. |\n| Return value |  | Object | with AST containing require expressions whose arguments have been replaced with corresponding dependency module hashes. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/update-requires.js#L16-L37).\n\n  ",
              "size": 1
            }
          ],
          "markdown": "## compileModules\n  \nGiven one or more module seeds, traverse their dependency graph, collecting any and\nall dependency modules, and then parse, transform, and hash those modules.  Return\na promise that resolves to the full set of modules, once they have been correctly\ngathered and compiled.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **moduleSeeds** | Array | Module seeds, i.e. modules that have not yet been populated with properties such as ast, `dependencies`, etc. Module objects _should_ have path, rawSource, and namespace values. |\n| Return value |  | Promise | to array of all compiled modules. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/modules/compile.js#L28-L122).\n\n  "
        }
      ],
      "markdown": "## getModuleMaps\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/index.js#L34-L44).\n\n  "
    },
    {
      "name": "getBundles",
      "node": {
        "path": "src/compile/index.js",
        "pluggableLine": 64,
        "edges": [
          "getSeedBundles",
          "dedupeExplicit",
          "dedupeImplicit",
          "hashBundle",
          "interpolateFilename"
        ],
        "fnParams": [
          "seedModules",
          "moduleMaps"
        ],
        "name": "getBundles",
        "fnStart": 64,
        "fnEnd": 75,
        "doc": null,
        "parsedDoc": null
      },
      "children": [
        {
          "name": "getSeedBundles",
          "node": {
            "path": "src/compile/index.js",
            "pluggableLine": 55,
            "edges": [
              "initBundle"
            ],
            "fnParams": [
              "seedModules",
              "modulesByPath"
            ],
            "name": "getSeedBundles",
            "fnStart": 55,
            "fnEnd": 62,
            "doc": null,
            "parsedDoc": null
          },
          "children": [
            {
              "name": "initBundle",
              "node": {
                "path": "src/compile/index.js",
                "pluggableLine": 46,
                "edges": [],
                "fnParams": [
                  "bundleDef",
                  "module",
                  "isEntryPt"
                ],
                "name": "initBundle",
                "fnStart": 46,
                "fnEnd": 53,
                "doc": null,
                "parsedDoc": null
              },
              "children": [],
              "markdown": "## initBundle\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/index.js#L46-L53).\n\n  ",
              "size": 1
            }
          ],
          "markdown": "## getSeedBundles\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/index.js#L55-L62).\n\n  "
        },
        {
          "name": "dedupeExplicit",
          "node": {
            "path": "src/compile/bundles/dedupe-explicit.js",
            "pluggableLine": 32,
            "edges": [],
            "fnParams": [
              "seedBundles",
              "modulesByAbsPath"
            ],
            "name": "dedupeExplicit",
            "fnStart": 5,
            "fnEnd": 30,
            "doc": null,
            "parsedDoc": null
          },
          "children": [],
          "markdown": "## dedupeExplicit\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/bundles/dedupe-explicit.js#L32).\n      The function that it wraps can be found [here](../src/compile/bundles/dedupe-explicit.js#L5-L30).\n\n  ",
          "size": 1
        },
        {
          "name": "dedupeImplicit",
          "node": {
            "path": "src/compile/bundles/dedupe-implicit.js",
            "pluggableLine": 37,
            "edges": [],
            "fnParams": [
              "explicitBundles"
            ],
            "name": "dedupeImplicit",
            "fnStart": 37,
            "fnEnd": 45,
            "doc": null,
            "parsedDoc": null
          },
          "children": [],
          "markdown": "## dedupeImplicit\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/bundles/dedupe-implicit.js#L37-L45).\n\n  ",
          "size": 1
        },
        {
          "name": "hashBundle",
          "node": {
            "path": "src/compile/bundles/hash.js",
            "pluggableLine": 40,
            "edges": [
              "updateBundleHash"
            ],
            "fnParams": [
              "bundle"
            ],
            "name": "hashBundle",
            "fnStart": 27,
            "fnEnd": 38,
            "doc": "*\n * Calculate the bundle's hash.  Defers to [updateBundleHash](#updatebundlehash) for\n * the actual calculations.\n *\n * @param  {Object} bundle  Bundle.\n *\n * @returns {String}        40-character SHA1 that uniquely identifies the bundle.\n ",
            "parsedDoc": {
              "tags": [
                {
                  "tag": "param",
                  "type": "Object",
                  "name": "bundle",
                  "optional": false,
                  "description": "Bundle.",
                  "line": 4,
                  "source": "@param  {Object} bundle  Bundle."
                },
                {
                  "tag": "returns",
                  "type": "String",
                  "name": "40-character",
                  "optional": false,
                  "description": "SHA1 that uniquely identifies the bundle.",
                  "line": 6,
                  "source": "@returns {String}        40-character SHA1 that uniquely identifies the bundle."
                }
              ],
              "line": 0,
              "description": "Calculate the bundle's hash.  Defers to [updateBundleHash](#updatebundlehash) for\nthe actual calculations.",
              "source": "Calculate the bundle's hash.  Defers to [updateBundleHash](#updatebundlehash) for\nthe actual calculations.\n\n@param  {Object} bundle  Bundle.\n\n@returns {String}        40-character SHA1 that uniquely identifies the bundle."
            }
          },
          "children": [
            {
              "name": "updateBundleHash",
              "node": {
                "path": "src/compile/bundles/hash.js",
                "pluggableLine": 12,
                "edges": [],
                "fnParams": [
                  "update",
                  "bundle"
                ],
                "name": "updateBundleHash",
                "fnStart": 12,
                "fnEnd": 16,
                "doc": "*\n * Calculate the bundle's hash by invoking `update` with data from the bundle.\n * `update` should be called with string data only.\n *\n * @param  {Function} update  Updates the ongoing computation of bundle hash.\n * @param  {Object}   bundle  The bundle object.\n ",
                "parsedDoc": {
                  "tags": [
                    {
                      "tag": "param",
                      "type": "Function",
                      "name": "update",
                      "optional": false,
                      "description": "Updates the ongoing computation of bundle hash.",
                      "line": 4,
                      "source": "@param  {Function} update  Updates the ongoing computation of bundle hash."
                    },
                    {
                      "tag": "param",
                      "type": "Object",
                      "name": "bundle",
                      "optional": false,
                      "description": "The bundle object.",
                      "line": 5,
                      "source": "@param  {Object}   bundle  The bundle object."
                    }
                  ],
                  "line": 0,
                  "description": "Calculate the bundle's hash by invoking `update` with data from the bundle.\n`update` should be called with string data only.",
                  "source": "Calculate the bundle's hash by invoking `update` with data from the bundle.\n`update` should be called with string data only.\n\n@param  {Function} update  Updates the ongoing computation of bundle hash.\n@param  {Object}   bundle  The bundle object."
                }
              },
              "children": [],
              "markdown": "## updateBundleHash\n  \nCalculate the bundle's hash by invoking `update` with data from the bundle.\n`update` should be called with string data only.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **update** | Function | Updates the ongoing computation of bundle hash. |\n| Parameter | **bundle** | Object | The bundle object. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/bundles/hash.js#L12-L16).\n\n  ",
              "size": 1
            }
          ],
          "markdown": "## hashBundle\n  \nCalculate the bundle's hash.  Defers to [updateBundleHash](#updatebundlehash) for\nthe actual calculations.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **bundle** | Object | Bundle. |\n| Return value |  | String | SHA1 that uniquely identifies the bundle. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/bundles/hash.js#L40).\n      The function that it wraps can be found [here](../src/compile/bundles/hash.js#L27-L38).\n\n  "
        },
        {
          "name": "interpolateFilename",
          "node": {
            "path": "src/compile/bundles/interpolate-filename.js",
            "pluggableLine": 14,
            "edges": [],
            "fnParams": [
              "bundle"
            ],
            "name": "interpolateFilename",
            "fnStart": 3,
            "fnEnd": 12,
            "doc": null,
            "parsedDoc": null
          },
          "children": [],
          "markdown": "## interpolateFilename\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/bundles/interpolate-filename.js#L14).\n      The function that it wraps can be found [here](../src/compile/bundles/interpolate-filename.js#L3-L12).\n\n  ",
          "size": 1
        }
      ],
      "markdown": "## getBundles\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/index.js#L64-L75).\n\n  "
    },
    {
      "name": "buildOutput",
      "node": {
        "path": "src/compile/index.js",
        "pluggableLine": 134,
        "edges": [
          "getUrls",
          "emitRawBundles"
        ],
        "fnParams": [
          "bundles"
        ],
        "name": "buildOutput",
        "fnStart": 134,
        "fnEnd": 146,
        "doc": "*\n * Given a stream of bundles, reduces those bundles down into a promise that\n * resolves into a final compilation object.\n *\n * This compilation object will have three key/value pairs:\n *\n * - cache:    populated cache from the compilation\n * - bundles:  a mapping of destination paths to `raw` code\n * - opts:     the original options passed to the compilation)\n *\n * @param  {Stream} bundles   Bundles generated by [getBundles](#getbundles).\n *\n * @return {Promise}          Compilation object.\n ",
        "parsedDoc": {
          "tags": [
            {
              "tag": "param",
              "type": "Stream",
              "name": "bundles",
              "optional": false,
              "description": "Bundles generated by [getBundles](#getbundles).",
              "line": 10,
              "source": "@param  {Stream} bundles   Bundles generated by [getBundles](#getbundles)."
            },
            {
              "tag": "return",
              "type": "Promise",
              "name": "Compilation",
              "optional": false,
              "description": "object.",
              "line": 12,
              "source": "@return {Promise}          Compilation object."
            }
          ],
          "line": 0,
          "description": "Given a stream of bundles, reduces those bundles down into a promise that\nresolves into a final compilation object.\n\nThis compilation object will have three key/value pairs:\n\n- cache:    populated cache from the compilation\n- bundles:  a mapping of destination paths to `raw` code\n- opts:     the original options passed to the compilation)",
          "source": "Given a stream of bundles, reduces those bundles down into a promise that\nresolves into a final compilation object.\n\nThis compilation object will have three key/value pairs:\n\n- cache:    populated cache from the compilation\n- bundles:  a mapping of destination paths to `raw` code\n- opts:     the original options passed to the compilation)\n\n@param  {Stream} bundles   Bundles generated by [getBundles](#getbundles).\n\n@return {Promise}          Compilation object."
        }
      },
      "children": [
        {
          "name": "getUrls",
          "node": {
            "path": "src/compile/index.js",
            "pluggableLine": 77,
            "edges": [],
            "fnParams": [
              "bundles"
            ],
            "name": "getUrls",
            "fnStart": 77,
            "fnEnd": 82,
            "doc": null,
            "parsedDoc": null
          },
          "children": [],
          "markdown": "## getUrls\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/index.js#L77-L82).\n\n  ",
          "size": 1
        },
        {
          "name": "emitRawBundles",
          "node": {
            "path": "src/compile/index.js",
            "pluggableLine": 84,
            "edges": [
              "constructBundle"
            ],
            "fnParams": [
              "bundlesArr",
              "urls"
            ],
            "name": "emitRawBundles",
            "fnStart": 84,
            "fnEnd": 118,
            "doc": null,
            "parsedDoc": null
          },
          "children": [
            {
              "name": "constructBundle",
              "node": {
                "path": "src/compile/construct/index.js",
                "pluggableLine": 158,
                "edges": [
                  "constructBundleBody"
                ],
                "fnParams": [
                  "opts"
                ],
                "name": "constructBundle",
                "fnStart": 158,
                "fnEnd": 161,
                "doc": "*\n * The primary constructor.  Given a set of options, construct Program AST to be emitted\n * as JavaScript.\n *\n * @param  {Object}  opts                 Options.\n * @param  {Boolean} opts.includeRuntime  Indicates whether Interlock run-time should be emitted.\n * @param  {Object}  opts.urls            Optional. If included, map of module hashes to URLs\n *                                        will be emitted.\n * @param  {Array}   opts.modules         Optional. If included, the module objects will be\n *                                        transformed into output module AST and emitted.\n * @param  {String}  opts.entryModuleHash Optional. If included, a statement will be rendered\n *                                        to invoke the specified module on load.\n *\n * @return {ASTnode}                      Single program AST node.\n ",
                "parsedDoc": {
                  "tags": [
                    {
                      "tag": "param",
                      "type": "Object",
                      "name": "opts",
                      "optional": false,
                      "description": "Options.",
                      "line": 4,
                      "source": "@param  {Object}  opts                 Options."
                    },
                    {
                      "tag": "param",
                      "type": "Boolean",
                      "name": "opts.includeRuntime",
                      "optional": false,
                      "description": "Indicates whether Interlock run-time should be emitted.",
                      "line": 5,
                      "source": "@param  {Boolean} opts.includeRuntime  Indicates whether Interlock run-time should be emitted."
                    },
                    {
                      "tag": "param",
                      "type": "Object",
                      "name": "opts.urls",
                      "optional": false,
                      "description": "Optional. If included, map of module hashes to URLs\nwill be emitted.",
                      "line": 6,
                      "source": "@param  {Object}  opts.urls            Optional. If included, map of module hashes to URLs\nwill be emitted."
                    },
                    {
                      "tag": "param",
                      "type": "Array",
                      "name": "opts.modules",
                      "optional": false,
                      "description": "Optional. If included, the module objects will be\ntransformed into output module AST and emitted.",
                      "line": 8,
                      "source": "@param  {Array}   opts.modules         Optional. If included, the module objects will be\ntransformed into output module AST and emitted."
                    },
                    {
                      "tag": "param",
                      "type": "String",
                      "name": "opts.entryModuleHash",
                      "optional": false,
                      "description": "Optional. If included, a statement will be rendered\nto invoke the specified module on load.",
                      "line": 10,
                      "source": "@param  {String}  opts.entryModuleHash Optional. If included, a statement will be rendered\nto invoke the specified module on load."
                    },
                    {
                      "tag": "return",
                      "type": "ASTnode",
                      "name": "Single",
                      "optional": false,
                      "description": "program AST node.",
                      "line": 13,
                      "source": "@return {ASTnode}                      Single program AST node."
                    }
                  ],
                  "line": 0,
                  "description": "The primary constructor.  Given a set of options, construct Program AST to be emitted\nas JavaScript.",
                  "source": "The primary constructor.  Given a set of options, construct Program AST to be emitted\nas JavaScript.\n\n@param  {Object}  opts                 Options.\n@param  {Boolean} opts.includeRuntime  Indicates whether Interlock run-time should be emitted.\n@param  {Object}  opts.urls            Optional. If included, map of module hashes to URLs\n                                       will be emitted.\n@param  {Array}   opts.modules         Optional. If included, the module objects will be\n                                       transformed into output module AST and emitted.\n@param  {String}  opts.entryModuleHash Optional. If included, a statement will be rendered\n                                       to invoke the specified module on load.\n\n@return {ASTnode}                      Single program AST node."
                }
              },
              "children": [
                {
                  "name": "constructBundleBody",
                  "node": {
                    "path": "src/compile/construct/index.js",
                    "pluggableLine": 130,
                    "edges": [
                      "constructModuleSet",
                      "constructRuntime",
                      "setLoadEntry",
                      "constructRegisterUrls"
                    ],
                    "fnParams": [
                      "opts"
                    ],
                    "name": "constructBundleBody",
                    "fnStart": 130,
                    "fnEnd": 141,
                    "doc": "*\n * Builds body of output bundle, to be inserted into the IIFE.\n *\n * @param  {Object}  opts  Same options object passed to constructBundleBody.\n *\n * @return {Array}         Body of bundle.\n ",
                    "parsedDoc": {
                      "tags": [
                        {
                          "tag": "param",
                          "type": "Object",
                          "name": "opts",
                          "optional": false,
                          "description": "Same options object passed to constructBundleBody.",
                          "line": 3,
                          "source": "@param  {Object}  opts  Same options object passed to constructBundleBody."
                        },
                        {
                          "tag": "return",
                          "type": "Array",
                          "name": "Body",
                          "optional": false,
                          "description": "of bundle.",
                          "line": 5,
                          "source": "@return {Array}         Body of bundle."
                        }
                      ],
                      "line": 0,
                      "description": "Builds body of output bundle, to be inserted into the IIFE.",
                      "source": "Builds body of output bundle, to be inserted into the IIFE.\n\n@param  {Object}  opts  Same options object passed to constructBundleBody.\n\n@return {Array}         Body of bundle."
                    }
                  },
                  "children": [
                    {
                      "name": "constructModuleSet",
                      "node": {
                        "path": "src/compile/construct/index.js",
                        "pluggableLine": 58,
                        "edges": [
                          "constructCommonModule"
                        ],
                        "fnParams": [
                          "modules",
                          "globalName"
                        ],
                        "name": "constructModuleSet",
                        "fnStart": 58,
                        "fnEnd": 72,
                        "doc": "*\n * Given an array of CJS modules (in the form of object expression AST nodes),\n * construct the AST of a file that would register those modules for consumption\n * by the Interlock run-time.\n *\n * @param  {Array}  modules        Array of modules objects.\n * @param  {String} globalName     Global variable name of the Interlock run-time.\n *\n * @return {Array}                 Array of AST nodes to be emitted as JavaScript.\n ",
                        "parsedDoc": {
                          "tags": [
                            {
                              "tag": "param",
                              "type": "Array",
                              "name": "modules",
                              "optional": false,
                              "description": "Array of modules objects.",
                              "line": 5,
                              "source": "@param  {Array}  modules        Array of modules objects."
                            },
                            {
                              "tag": "param",
                              "type": "String",
                              "name": "globalName",
                              "optional": false,
                              "description": "Global variable name of the Interlock run-time.",
                              "line": 6,
                              "source": "@param  {String} globalName     Global variable name of the Interlock run-time."
                            },
                            {
                              "tag": "return",
                              "type": "Array",
                              "name": "Array",
                              "optional": false,
                              "description": "of AST nodes to be emitted as JavaScript.",
                              "line": 8,
                              "source": "@return {Array}                 Array of AST nodes to be emitted as JavaScript."
                            }
                          ],
                          "line": 0,
                          "description": "Given an array of CJS modules (in the form of object expression AST nodes),\nconstruct the AST of a file that would register those modules for consumption\nby the Interlock run-time.",
                          "source": "Given an array of CJS modules (in the form of object expression AST nodes),\nconstruct the AST of a file that would register those modules for consumption\nby the Interlock run-time.\n\n@param  {Array}  modules        Array of modules objects.\n@param  {String} globalName     Global variable name of the Interlock run-time.\n\n@return {Array}                 Array of AST nodes to be emitted as JavaScript."
                        }
                      },
                      "children": [
                        {
                          "name": "constructCommonModule",
                          "node": {
                            "path": "src/compile/construct/index.js",
                            "pluggableLine": 38,
                            "edges": [],
                            "fnParams": [
                              "moduleBody",
                              "deps"
                            ],
                            "name": "constructCommonModule",
                            "fnStart": 38,
                            "fnEnd": 46,
                            "doc": "*\n * Given an array of AST nodes and their dependencies (possibly originating from\n * a common JS module), construct an object expression that represents its run-time\n * equivalent.\n *\n * @param  {Array}  moduleBody  Array of ECMAscript AST nodes.\n * @param  {Array}  deps        Array of modules upon which origin module is\n *                              dependent.\n *\n * @return {ASTnode}            Object expression AST node.\n ",
                            "parsedDoc": {
                              "tags": [
                                {
                                  "tag": "param",
                                  "type": "Array",
                                  "name": "moduleBody",
                                  "optional": false,
                                  "description": "Array of ECMAscript AST nodes.",
                                  "line": 5,
                                  "source": "@param  {Array}  moduleBody  Array of ECMAscript AST nodes."
                                },
                                {
                                  "tag": "param",
                                  "type": "Array",
                                  "name": "deps",
                                  "optional": false,
                                  "description": "Array of modules upon which origin module is\ndependent.",
                                  "line": 6,
                                  "source": "@param  {Array}  deps        Array of modules upon which origin module is\ndependent."
                                },
                                {
                                  "tag": "return",
                                  "type": "ASTnode",
                                  "name": "Object",
                                  "optional": false,
                                  "description": "expression AST node.",
                                  "line": 9,
                                  "source": "@return {ASTnode}            Object expression AST node."
                                }
                              ],
                              "line": 0,
                              "description": "Given an array of AST nodes and their dependencies (possibly originating from\na common JS module), construct an object expression that represents its run-time\nequivalent.",
                              "source": "Given an array of AST nodes and their dependencies (possibly originating from\na common JS module), construct an object expression that represents its run-time\nequivalent.\n\n@param  {Array}  moduleBody  Array of ECMAscript AST nodes.\n@param  {Array}  deps        Array of modules upon which origin module is\n                             dependent.\n\n@return {ASTnode}            Object expression AST node."
                            }
                          },
                          "children": [],
                          "markdown": "## constructCommonModule\n  \nGiven an array of AST nodes and their dependencies (possibly originating from\na common JS module), construct an object expression that represents its run-time\nequivalent.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **moduleBody** | Array | Array of ECMAscript AST nodes. |\n| Parameter | **deps** | Array | Array of modules upon which origin module is dependent. |\n| Return value |  | ASTnode | expression AST node. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/construct/index.js#L38-L46).\n\n  ",
                          "size": 1
                        }
                      ],
                      "markdown": "## constructModuleSet\n  \nGiven an array of CJS modules (in the form of object expression AST nodes),\nconstruct the AST of a file that would register those modules for consumption\nby the Interlock run-time.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **modules** | Array | Array of modules objects. |\n| Parameter | **globalName** | String | Global variable name of the Interlock run-time. |\n| Return value |  | Array | of AST nodes to be emitted as JavaScript. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/construct/index.js#L58-L72).\n\n  "
                    },
                    {
                      "name": "constructRuntime",
                      "node": {
                        "path": "src/compile/construct/index.js",
                        "pluggableLine": 81,
                        "edges": [],
                        "fnParams": [
                          "globalName"
                        ],
                        "name": "constructRuntime",
                        "fnStart": 81,
                        "fnEnd": 85,
                        "doc": "*\n * Construct the guts of the Interlock run-time for inclusion in file output.\n *\n * @param  {String} globalName  Global variable name of Interlock run-time.\n *\n * @return {Array}              Array of AST nodes.\n ",
                        "parsedDoc": {
                          "tags": [
                            {
                              "tag": "param",
                              "type": "String",
                              "name": "globalName",
                              "optional": false,
                              "description": "Global variable name of Interlock run-time.",
                              "line": 3,
                              "source": "@param  {String} globalName  Global variable name of Interlock run-time."
                            },
                            {
                              "tag": "return",
                              "type": "Array",
                              "name": "Array",
                              "optional": false,
                              "description": "of AST nodes.",
                              "line": 5,
                              "source": "@return {Array}              Array of AST nodes."
                            }
                          ],
                          "line": 0,
                          "description": "Construct the guts of the Interlock run-time for inclusion in file output.",
                          "source": "Construct the guts of the Interlock run-time for inclusion in file output.\n\n@param  {String} globalName  Global variable name of Interlock run-time.\n\n@return {Array}              Array of AST nodes."
                        }
                      },
                      "children": [],
                      "markdown": "## constructRuntime\n  \nConstruct the guts of the Interlock run-time for inclusion in file output.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **globalName** | String | Global variable name of Interlock run-time. |\n| Return value |  | Array | of AST nodes. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/construct/index.js#L81-L85).\n\n  ",
                      "size": 1
                    },
                    {
                      "name": "setLoadEntry",
                      "node": {
                        "path": "src/compile/construct/index.js",
                        "pluggableLine": 95,
                        "edges": [],
                        "fnParams": [
                          "moduleHash",
                          "globalName"
                        ],
                        "name": "setLoadEntry",
                        "fnStart": 95,
                        "fnEnd": 102,
                        "doc": "*\n * Construct a statement to instruct the runtime to run the specified module.\n *\n * @param  {String} moduleHash  Hash of the module to be required.\n * @param  {String} globalName  Global variable name of Interlock run-time.\n *\n * @return {ASTnode}            Single AST node.\n ",
                        "parsedDoc": {
                          "tags": [
                            {
                              "tag": "param",
                              "type": "String",
                              "name": "moduleHash",
                              "optional": false,
                              "description": "Hash of the module to be required.",
                              "line": 3,
                              "source": "@param  {String} moduleHash  Hash of the module to be required."
                            },
                            {
                              "tag": "param",
                              "type": "String",
                              "name": "globalName",
                              "optional": false,
                              "description": "Global variable name of Interlock run-time.",
                              "line": 4,
                              "source": "@param  {String} globalName  Global variable name of Interlock run-time."
                            },
                            {
                              "tag": "return",
                              "type": "ASTnode",
                              "name": "Single",
                              "optional": false,
                              "description": "AST node.",
                              "line": 6,
                              "source": "@return {ASTnode}            Single AST node."
                            }
                          ],
                          "line": 0,
                          "description": "Construct a statement to instruct the runtime to run the specified module.",
                          "source": "Construct a statement to instruct the runtime to run the specified module.\n\n@param  {String} moduleHash  Hash of the module to be required.\n@param  {String} globalName  Global variable name of Interlock run-time.\n\n@return {ASTnode}            Single AST node."
                        }
                      },
                      "children": [],
                      "markdown": "## setLoadEntry\n  \nConstruct a statement to instruct the runtime to run the specified module.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **moduleHash** | String | Hash of the module to be required. |\n| Parameter | **globalName** | String | Global variable name of Interlock run-time. |\n| Return value |  | ASTnode | AST node. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/construct/index.js#L95-L102).\n\n  ",
                      "size": 1
                    },
                    {
                      "name": "constructRegisterUrls",
                      "node": {
                        "path": "src/compile/construct/index.js",
                        "pluggableLine": 112,
                        "edges": [],
                        "fnParams": [
                          "urls",
                          "globalName"
                        ],
                        "name": "constructRegisterUrls",
                        "fnStart": 112,
                        "fnEnd": 121,
                        "doc": "*\n * Transforms a map of module-hashes-to-URLs to the AST equivalent.\n *\n * @param  {Object} urls        Keys are module hashes, values are URL strings.\n * @param  {String} globalName  Global variable name of Interlock run-time.\n *\n * @return {ASTnode}            Single AST node.\n ",
                        "parsedDoc": {
                          "tags": [
                            {
                              "tag": "param",
                              "type": "Object",
                              "name": "urls",
                              "optional": false,
                              "description": "Keys are module hashes, values are URL strings.",
                              "line": 3,
                              "source": "@param  {Object} urls        Keys are module hashes, values are URL strings."
                            },
                            {
                              "tag": "param",
                              "type": "String",
                              "name": "globalName",
                              "optional": false,
                              "description": "Global variable name of Interlock run-time.",
                              "line": 4,
                              "source": "@param  {String} globalName  Global variable name of Interlock run-time."
                            },
                            {
                              "tag": "return",
                              "type": "ASTnode",
                              "name": "Single",
                              "optional": false,
                              "description": "AST node.",
                              "line": 6,
                              "source": "@return {ASTnode}            Single AST node."
                            }
                          ],
                          "line": 0,
                          "description": "Transforms a map of module-hashes-to-URLs to the AST equivalent.",
                          "source": "Transforms a map of module-hashes-to-URLs to the AST equivalent.\n\n@param  {Object} urls        Keys are module hashes, values are URL strings.\n@param  {String} globalName  Global variable name of Interlock run-time.\n\n@return {ASTnode}            Single AST node."
                        }
                      },
                      "children": [],
                      "markdown": "## constructRegisterUrls\n  \nTransforms a map of module-hashes-to-URLs to the AST equivalent.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **urls** | Object | Keys are module hashes, values are URL strings. |\n| Parameter | **globalName** | String | Global variable name of Interlock run-time. |\n| Return value |  | ASTnode | AST node. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/construct/index.js#L112-L121).\n\n  ",
                      "size": 1
                    }
                  ],
                  "markdown": "## constructBundleBody\n  \nBuilds body of output bundle, to be inserted into the IIFE.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **opts** | Object | Same options object passed to constructBundleBody. |\n| Return value |  | Array | of bundle. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/construct/index.js#L130-L141).\n\n  "
                }
              ],
              "markdown": "## constructBundle\n  \nThe primary constructor.  Given a set of options, construct Program AST to be emitted\nas JavaScript.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **opts** | Object | Options. |\n| Parameter | **opts.includeRuntime** | Boolean | Indicates whether Interlock run-time should be emitted. |\n| Parameter | **opts.urls** | Object | Optional. If included, map of module hashes to URLs will be emitted. |\n| Parameter | **opts.modules** | Array | Optional. If included, the module objects will be transformed into output module AST and emitted. |\n| Parameter | **opts.entryModuleHash** | String | Optional. If included, a statement will be rendered to invoke the specified module on load. |\n| Return value |  | ASTnode | program AST node. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/construct/index.js#L158-L161).\n\n  "
            }
          ],
          "markdown": "## emitRawBundles\n  \n  \n  This Pluggable's definition can be found [here](../src/compile/index.js#L84-L118).\n\n  "
        }
      ],
      "markdown": "## buildOutput\n  \nGiven a stream of bundles, reduces those bundles down into a promise that\nresolves into a final compilation object.\n\nThis compilation object will have three key/value pairs:\n\n- cache:    populated cache from the compilation\n- bundles:  a mapping of destination paths to `raw` code\n- opts:     the original options passed to the compilation)\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Parameter | **bundles** | Stream | Bundles generated by [getBundles](#getbundles). |\n| Return value |  | Promise | object. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/index.js#L134-L146).\n\n  "
    }
  ],
  "markdown": "## compile\n  \nPerforms an end-to-end compilation.\n\n  \n|     | Name | Type | Description |\n| --- | ---- | ---- | ----------- |\n| Return value |  | Promise | Resolves to the compilation output. |\n\n\n  This Pluggable's definition can be found [here](../src/compile/index.js#L153-L161).\n\n  "
}